
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 用户自定义配置（该文件放一般性配置，可覆盖~/.vimrc里的配置，若要增加、卸载插件，请放入~/.vimrc.custom.plugins）
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 开启相对行号
set relativenumber

" 开启鼠标
" set mouse+=a " enable mouse mode (scrolling, selection, etc)

" 设置光标所在列高亮
" set cursorcolumn

" indentLine 开启代码对齐线
let g:indentLine_enabled = 1

" markdown
" let system = system('uname -s')
" if system == "Darwin\n"
"     let g:mkdp_path_to_chrome = "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome"
" else
"     let g:mkdp_path_to_chrome = '/usr/bin/google-chrome-stable %U'
" endif
" nmap <silent> <F7> <Plug>MarkdownPreview
" imap <silent> <F7> <Plug>MarkdownPreview
" nmap <silent> <F8> <Plug>StopMarkdownPreview
" imap <silent> <F8> <Plug>StopMarkdownPreview

" Doxygen
" let g:DoxygenToolkit_authorName="chxuan, 787280310@qq.com"
" let s:licenseTag = "Copyright(C)\<enter>"
" let s:licenseTag = s:licenseTag . "For free\<enter>"
" let s:licenseTag = s:licenseTag . "All right reserved\<enter>"
" let g:DoxygenToolkit_licenseTag = s:licenseTag
" let g:DoxygenToolkit_briefTag_funcName="yes"
" let g:doxygen_enhanced_color=1
" let g:DoxygenToolkit_commentType="Qt"

set showmatch " show matching braces when text indicator is over them

if has("patch-7.4.710")
    set listchars=eol:$,tab:>-,trail:~,nbsp:<,space:⋅ " set list to see tabs and non-breakable spaces
else
    set listchars=eol:$,tab:>-,trail:~,nbsp:< " set list to see tabs and non-breakable spaces
endif
set list

set scrolloff=5 " show lines above and below cursor (when possible)
set history=8192 " more history
set nojoinspaces " suppress inserting two spaces between sentences
set smartcase

if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

" unbind keys
map <C-a> <Nop>
map <C-x> <Nop>
nmap Q <Nop>

" disable audible bell
set noerrorbells visualbell t_vb=

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

imap JH <Esc>
" quit command-line without executing
cmap JH <c-c>
noremap JH <Esc>

noremap Zz <c-w>_ \| <c-w>\|
noremap Zo <c-w>=

" In normal mode, if the cursor is not in a fold, move to the right (the default behavior). Otherwise, press Space to toggle the current fold open/closed.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
" In addition, with the manual fold method, you can create a fold by visually selecting some lines, then pressing Space.
vnoremap <Space> zf

" Count search results
set shortmess-=S

nmap ]h <Plug>(GitGutterNextHunk)
" nmap h] <Plug>(GitGutterNextHunk) " slow down h key
nmap [h <Plug>(GitGutterPrevHunk)
" nmap h[ <Plug>(GitGutterPrevHunk) " slow down h key
" When you make a change to a file tracked by git, the diff markers should appear automatically. The delay is governed by vim's updatetime option; the default value is 4000, i.e. 4 seconds, but I suggest reducing it to around 100ms (add set updatetime=100 to your vimrc). Note updatetime also controls the delay before vim writes its swap file (see :help updatetime).
set updatetime=100

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

autocmd VimEnter * silent exec "! echo -ne '\e[1 q'"
autocmd VimLeave * silent exec "! echo -ne '\e[5 q'"
autocmd InsertEnter * silent exec "! echo -ne '\e[5 q'"
autocmd InsertLeave * silent exec "! echo -ne '\e[1 q'"

" FZF
" If installed using Homebrew
set rtp+=/usr/local/opt/fzf
" For Linux using bundled fzf
set rtp+=~/.fzf/fzf
" Prevent FZF commands from opening in none modifiable buffers
function! FZFOpen(cmd)
    " If more than 1 window, and buffer is not modifiable or file type is
    " NERD tree or Quickfix type
    if winnr('$') > 1 && (!&modifiable || &ft == 'nerdtree' || &ft == 'qf')
        " Move one window to the right, then up
        wincmd l
        wincmd k
    endif
    exe a:cmd
endfunction
" exclude filenames from search
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--ignore "cscope.*" --ignore tags', {'options': '--delimiter : --nth 4..'}, <bang>0)
nnoremap <silent> <leader>~ :call FZFOpen(":Files ~")<CR>
nnoremap <silent> <leader>d :call FZFOpen(":Files")<CR>
nnoremap <silent> <leader>b :call FZFOpen(":Buffers")<CR>
nnoremap <silent> <leader>l :call FZFOpen(':BLines')<CR>
nnoremap <silent> <leader>g :call FZFOpen(':Ag')<CR>
" nnoremap <silent> <leader>K :Ag <C-R><C-W><CR>
" FZF Search for previous opened Files
nnoremap <silent> <leader>zh :call FZFOpen(":History")<CR>

" Vim starts with garbage characters in command window
autocmd VimEnter * redraw!

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>0 <Plug>AirlineSelectTab0
nmap <leader>_ <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab
" Will first go to the previous buffer, then delete the last buffer
nnoremap <leader>c :bp\|bd #<CR>

" argwrap
nnoremap <leader>w :ArgWrap<CR>

noremap <leader>x :OverCommandLine<CR>

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

hi DiffAdd    cterm=bold ctermfg=red
hi DiffDelete cterm=bold ctermfg=red ctermbg=14
hi DiffChange cterm=bold ctermfg=15  ctermbg=green
hi DiffText   cterm=bold ctermfg=9   term=reverse

let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}

autocmd FileType c,cpp,objc nnoremap <buffer><Leader>m :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>m :ClangFormat<CR>
" Toggle auto formatting:
nmap <Leader>C :ClangFormatAutoToggle<CR>
let g:clang_format#style_options = { "AccessModifierOffset" : -1 }

au BufNewFile,BufRead *.cu set filetype=cuda
au BufNewFile,BufRead *.cuh set filetype=cuda
